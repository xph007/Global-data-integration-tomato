#  Microbial metabolome data analysis
library(openxlsx)
library(ComplexHeatmap)
library(circlize)
library(data.table)  # 用于快速读取数据
# library(showtext)  # 用于支持中文字符
library(RColorBrewer) 
library(tidyverse)
library(phyloseq)
library(ggClusterNet)


da1 =  read.xlsx("./data/代谢物测定/Sample_data.xlsx",sheet = 2)
head(da1) 
# 构建ps 文件-----
ncol(da1)
da1$level %>% unique()
otu =  da1%>% filter(level %in% c("level1","level2"))%>%select(MS2_name,20:35)
otu =  da1%>% filter(level %in% c("level1"))


otu %>% filter(HMDB != "NA" |  KEGG.COMPOUND.ID != "NA")
496+296
row.names(otu)= otu$MS2_name
otu$MS2_name = NULL
head(otu)
nrow(otu)

map =  read.xlsx("./data/代谢物测定/Sample_data.xlsx",sheet = 3)
map
row.names(map)= map$ID
colnames(da1)
tax = da1%>% filter(level %in% c("level1","level2"))%>%select(MS2_name,!c(2:7,20:35))
tax %>% head()
row.names(tax) = tax$MS2_name

ps_ms = phyloseq(sample_data(map),otu_table(as.matrix(otu), taxa_are_rows=TRUE), tax_table(as.matrix(tax)))
saveRDS(ps_ms ,"./data/ps_ms.rds")

sample_data(ps_ms)
# 数据预处理------
#相对丰度转换



#---主题颜色设置#-------
source("G:\\三人成师-培训资料汇总\\第6期\\micro\\total_amplicon.R")
#---扩增子环境布置
ps0 = ps_ms
res = theme_my()
mytheme1 = res[[1]]
mytheme2 = res[[2]]; colset1 = res[[3]];colset2 = res[[4]];colset3 = res[[5]];colset4 = res[[6]]

#--提取有多少个分组
gnum = phyloseq::sample_data(ps0)$Group %>% unique() %>% length()
gnum
# 设定排序顺序
axis_order = phyloseq::sample_data(ps)$Group %>% unique()

ps
#-设定结果保存路径
repath = "./result_and_plot/GCMS_result_and_plot/"
fs::dir_create(repath)


#--这部分代码正在调试--尚不可使用-这部分问题先不解决
#-本来设计的使用爬虫实时调用，但是网络问题很多
# -所以就使用下载数据库来进行，现在正在权衡中

#--1 代谢物注释HMDB和KEGG数据库#------
id = ps %>% ggClusterNet::vegan_otu() %>% t() %>%
  as.data.frame() %>% row.names()
#-HMDB数据库注释
source("G:\\三人成师-培训资料汇总\\第6期\\micro\\ann.HMDB.R")
repath = "G:/Shared_Folder/micro/"
db = read.csv(paste(repath,"/hmdb_all_information_database.csv",sep = ""))
head(db)

db%>% filter(HMDBID!= "NA") %>% nrow()

tax1 = ann.HMDB (id = id,repath  = repath )
head(tax1)
colnames(tax1)

tax1 = tax1 %>% distinct(id,.keep_all = TRUE) %>%
  column_to_rownames("id")
head(tax1)
# #-2 代谢物注释KEGG数据库-模糊注释#----
# source("E:\\Shared_Folder\\Function_local\\R_function\\micro//ann.kegg.compounds.R")
# tax2 = ann.kegg(id,repath = "E:/Shared_Folder/Function_local/R_function/micro/")
# head(tax2)
# #--注释kegg数据库算法2
# tax2 = ann.kegg2(id,repath = "E:/Shared_Folder/Function_local/R_function/micro/")
# head(tax2)
# tax= cbind(tax1,tax2)

# tax0 = ps %>% vegan_tax() %>% as.data.frame() #%>% rownames_to_column("ID")
# head(tax0)
# tax2 = tax0 %>% left_join(tax,by = "ID") %>% column_to_rownames("ID")
# head(tax2)

# tax =  readxl::read_excel("./data/GCMSdata/GCMS.xlsx",sheet = 2) %>%
#   as.data.frame()
# head(tax)
# tax = tax %>% distinct(ID, .keep_all = TRUE)
# row.names(tax) = tax$ID
phyloseq::tax_table(ps) = as.matrix(tax1)

ps
# tax_table(ps)
saveRDS(ps,"./data/GCMSdata/ps_GC_upper.rds")


ps

#--3 分类堆叠柱状图#--------
source("G:\\三人成师-培训资料汇总\\第6期\\micro\\barMainplot_GC.R")
barpath = paste(repath,"/Microbial_composition/",sep = "")
dir.create(barpath)

phyloseq::rank_names(ps)
j = "Class"

strbar = c("Super_class","Class" , "Sub_class"  )
# strbar = c("Superclass","Class"  )

for (j in strbar) {
  result = barMainplot(ps = ps,
                       j = j,
                       # axis_ord = axis_order,
                       label = FALSE,
                       sd = FALSE,
                       Top = 12)
  p4_1 <- result[[1]] +
    # scale_fill_brewer(palette = "Paired") +
    scale_fill_manual(values = colset3) +
    # scale_x_discrete(limits = axis_order) +
    mytheme1
  p4_1
  p4_2  <- result[[3]] +
    # scale_fill_brewer(palette = "Paired") +
    scale_fill_manual(values = colset3) +
    # scale_x_discrete(limits = axis_order) +
    mytheme1
  p4_2
  
  databar <- result[[2]] %>%
    dplyr::group_by(Group,aa) %>%
    dplyr::summarise(sum(Abundance)) %>% as.data.frame()
  head(databar)
  colnames(databar) = c("Group",j,"Abundance(%)")
  
  
  FileName1 <- paste(barpath,"/a2_",j,"_barflow",".pdf", sep = "")
  ggsave(FileName1, p4_2, width = (5+ gnum), height =8 )
  FileName2 <- paste(barpath,"/a2_",j,"_barflow",".jpg", sep = "")
  ggsave(FileName2, p4_2, width = (5+ gnum), height =8 )
  
  FileName1 <- paste(barpath,"/a2_",j,"_bar",".pdf", sep = "")
  ggsave(FileName1, p4_1, width = (5+ gnum), height =8 )
  FileName2 <- paste(barpath,"/a2_",j,"_bar",".jpg", sep = "")
  ggsave(FileName2, p4_1, width = (5+ gnum), height =8 )
  
  FileName <- paste(barpath,"/a2_",j,"_bar_data",".csv", sep = "")
  write.csv(databar,FileName)
}



#--5-分类化合物分组差异#-------
library(EasyStat)
library(ggClusterNet)
barpath = paste(repath,"/Different_Class_EasyStat/",sep = "")
dir.create(barpath)

map = sample_data(ps)
head(map)
map = map[,1:2]
sample_data(ps) = map
for (j in strbar) {
  dat <- ps %>% scale_micro(method = "rela") %>%
    tax_glom_wt(ranks = j) %>%
    vegan_otu() %>%
    as.data.frame()
  head(dat)
  
  dat$id = row.names(dat)
  
  dat2 = dat %>%
    dplyr::left_join(as.tibble(sample_data(ps)),by = c("id" = "ID")) %>%
    # dplyr::filter(Group != "qiao") %>%
    dplyr::rename(group = Group) %>%
    select(id,group,everything())
  # dat2 %>%
  #   dim()
  
  dat2$group = as.factor(dat2$group)
  head(dat2)
  
  result = MuiKwWlx2(data = dat2,num = c(3:dim(dat2)[2]))
  
  FileName <- paste(barpath,"/",j,"_classification_different_label.csv", sep = "")
  write.csv(result,FileName,sep = "")
  FileName <- paste(barpath,"/",j,"_classification_data.csv", sep = "")
  write.csv(dat2,FileName,sep = "")
  
  result1 = EasyStat::FacetMuiPlotresultBox(data = dat2,num = c(3:dim(dat2)[2]),result = result,sig_show ="abc",
                                            ncol = 4 )
  p1_1 = result1[[1]] +
    # scale_x_discrete(limits = axis_order) +
    mytheme2 +
    guides(fill = guide_legend(title = NULL)) +
    scale_fill_manual(values = colset1)
  p1_1
  
  res = FacetMuiPlotresultBar(data = dat2,num = c(3:dim(dat2)[2]),result = result,sig_show ="abc",
                              ncol = 4)
  p1_2 = res[[1]]+
    # scale_x_discrete(limits = axis_order) +
    guides(color = FALSE) +
    mytheme2 +
    guides(fill = guide_legend(title = NULL))+
    scale_fill_manual(values = colset1)
  p1_2
  
  res = FacetMuiPlotReBoxBar(data = dat2,num = c(3:dim(dat2)[2]),result = result,sig_show ="abc",ncol = 4)
  p1_3 = res[[1]]+
    # scale_x_discrete(limits = axis_order) +
    mytheme2 +
    guides(fill = guide_legend(title = NULL))+
    scale_fill_manual(values = colset1)
  p1_3
  
  h = dim(dat2)[2]%/%4
  
  FileName <- paste(barpath,"/",j,"_classification_Facet_box", ".pdf", sep = "")
  ggsave(FileName, p1_1, width = 12, height =3*h,limitsize = FALSE)
  
  FileName <- paste(barpath,"/",j,"_classification_Facet_bar", ".pdf", sep = "")
  ggsave(FileName, p1_2, width = 12, height =3*h,limitsize = FALSE)
  
  FileName <- paste(barpath,"/",j,"_classification_Facet_boxbar", ".pdf", sep = "")
  ggsave(FileName, p1_3, width = 12, height =3*h,limitsize = FALSE)
  
  FileName <- paste(barpath,"/",j,"_classification_Facet_box", ".jpg", sep = "")
  ggsave(FileName, p1_1, width = 12, height =3*h,limitsize = FALSE)
  
  FileName <- paste(barpath,"/",j,"_classification_Facet_bar", ".jpg", sep = "")
  ggsave(FileName, p1_2, width = 12, height =3*h,limitsize = FALSE)
  
  FileName <- paste(barpath,"/",j,"_classification_Facet_boxbar", ".jpg", sep = "")
  ggsave(FileName, p1_3, width = 12, height =3*h,limitsize = FALSE)
  
  
}


#---4-分组热图#-----------
source("G:\\三人成师-培训资料汇总\\第6期\\GC-MS\\GC_ggheatmap_buplot.R")
rank.names(ps)

barpath = paste(repath,"/Different_Class_heatmap_EasyStat/",sep = "")
dir.create(barpath)



for (j in strbar) {
  ps_rela <- ps %>% scale_micro(method = "rela") %>%
    tax_glom_wt(ranks = "Class")
  
  result <- GCheatmap (ps_rela,
                       label =  F,
                       col_cluster = F,
                       row_cluster = F)
  p1 <- result[[1]]
  p1
  # p1 +  scale_fill_gradientn(colours =colorRampPalette(RColorBrewer::brewer.pal(11,"Set3"))(60))
  p2 <- result[[2]]
  p2
  
  h = taxa_names(ps_rela) %>% length()
  w = sample_names(ps_rela)  %>% length()
  
  
  filename = paste(barpath,"/",j,"_classification_","ggheatmap.pdf",sep = "")
  ggsave(filename,p1,width = w/1.7,height = h/3)
  
  filename = paste(barpath,"/",j,"_classification_","ggbubble.pdf",sep = "")
  ggsave(filename,p2,width = w/1.7,height = h/3)
  
  filename = paste(barpath,"/",j,"_classification_","ggheatmap.png",sep = "")
  ggsave(filename,p1,width = w/1.7,height = h/3)
  
  filename = paste(barpath,"/",j,"_classification_","ggbubble.png",sep = "")
  ggsave(filename,p2,width = w/1.7,height = h/3)
  
}



#---6 排序分析PCA等#-------------
betapath = paste(repath,"/beta_orda_total/",sep = "")
dir.create(betapath)


# "unifrac" "wunifrac" "dpcoa" "jsd" "manhattan" "euclidean"   "canberra" "bray" "kulczynski"
# "jaccard" "gower" "altGower" "morisita" "horn" "mountford"  "raup" "binomial"
# "chao"  "cao" "w"  "-1"  "c" "wb"  "r"   "I"  "e" "t" "me"   "j"  "sor"  "m"   "-2"  "co"
# DCA, CCA, RDA, NMDS, MDS, PCoA, PCA, LDA

source("G:\\三人成师-培训资料汇总\\第6期\\micro\\BetaDiv.R")
source("G:\\三人成师-培训资料汇总\\第6期\\micro\\MicroTest.R")
source("G:\\三人成师-培训资料汇总\\第6期\\micro\\pairMicroTest.R")


methodlist = c("t-sne","LDA", "PCA")
method= "t-sne"
for (method in methodlist) {
  result = BetaDiv(ps = ps_ms, group = "Group", dist = "bray",
                   method = method, Micromet = "anosim",
                   pvalue.cutoff = 0.05,pair = F)
  p3_1 = result[[1]] +
    scale_fill_manual(values = colset1)+
    scale_color_manual(values = colset1,guide = F) +
    mytheme1 +
    theme(legend.position = c(0.2,0.2))+
    scale_fill_npg()+
    scale_color_npg()
  p3_1
  #带标签图形出图
  p3_2 = result[[3]] +
    scale_fill_manual(values = colset1)+
    scale_color_manual(values = colset1,guide = F) +
    mytheme1 +
    theme(legend.position = c(0.2,0.2))+
    scale_fill_npg()+
    scale_color_npg()
  p3_2
  
  FileName <- paste(betapath,"/a2_",method,"bray.pdf", sep = "")
  ggsave(FileName, p3_1, width = 8, height = 8)
  FileName1 <- paste(betapath,"/a2_",method,"",method,"bray.jpg", sep = "")
  ggsave(FileName1 , p3_1, width = 12, height = 12)
  
  FileName <- paste(betapath,"/a2_",method,"bray_label.pdf", sep = "")
  ggsave(FileName, p3_2, width = 12, height = 12)
  FileName1 <- paste(betapath,"/a2_",method,"bray_label.jpg", sep = "")
  ggsave(FileName1 , p3_2, width = 12, height = 12)
  
  # 提取出图数据
  plotdata = result[[2]]
  FileName <-  paste(betapath,"/a2_",method,"bray.csv", sep = "")
  write.csv(plotdata,FileName)
  #---------排序-精修图
  plotdata =result[[2]]
  head(plotdata)
  # 求均值
  cent <- aggregate(cbind(x,y) ~Group, data = plotdata, FUN = mean)
  cent
  # 合并到样本坐标数据中
  segs <- merge(plotdata, setNames(cent, c('Group','oNMDS1','oNMDS2')),
                by = 'Group', sort = FALSE)
  
  # p2$layers[[2]] = NULL
  # library(ggcor)
  library(ggsci)
  p3_3 = p3_1 +geom_segment(data = segs,
                            mapping = aes(xend = oNMDS1, yend = oNMDS2,color = Group),show.legend=F) + # spiders
    geom_point(mapping = aes(x = x, y = y),data = cent, size = 5,pch = 24,color = "black",fill = "yellow") +
    scale_fill_manual(values = colset1)+
    scale_color_manual(values = colset1,guide = F) +
    mytheme1 +
    theme(legend.position = c(0.2,0.2))
  p3_3
  
  FileName <- paste(betapath,"/a2_",method,"bray_star.pdf", sep = "")
  ggsave(FileName, p3_3, width = 8, height = 8)
  FileName1 <- paste(betapath,"/a2_",method,"bray_star.jpg", sep = "")
  ggsave(FileName1 , p3_3, width = 8, height = 8)
  
}

map
#提取总体比较
TResult =result[[5]]
head(TResult)

# 提取两两检测结果
pair = result[[4]]
pair
FileName <- paste(betapath,"Pair_anosim.csv", sep = "")
write.csv(pair,FileName)
FileName <- paste(betapath,"Total_anosim.csv", sep = "")
write.csv(TResult,FileName)

#--换用adonis差异分析

# title1 = MicroTest(ps = ps, Micromet = "adonis", dist = "bray")
# title1
# FileName <- paste(betapath,"Total_adonis.csv", sep = "")
# write.csv(title1,FileName)
# pairResult = pairMicroTest(ps = ps, Micromet = "adonis", dist = "bray")
# FileName <- paste(betapath,"Pair_anosim.csv", sep = "")
# write.csv(pair,FileName)



#---7 层次聚类#--------
source("G:\\三人成师-培训资料汇总\\第6期\\micro\\cluster_plot.R")
clupath = paste(repath,"/cluster_plot/",sep = "")
dir.create(clupath)
res = cluster_plot (ps= ps,hcluter_method = "complete",
                    dist = "bray",cuttree = gnum,row_cluster = T,col_cluster =  T)

p0 = res[[1]]
p0



FileName <- paste(clupath,"cluster", ".jpg", sep = "")
ggsave(FileName, p0, width = 6, height =8,limitsize = FALSE)
FileName <- paste(clupath,"cluster", ".pdf", sep = "")
ggsave(FileName, p0, width = 6 , height = 8,limitsize = FALSE)

p1 = res[[2]]
p2 = res[[3]]

FileName <- paste(clupath,"heatmap_cluster", ".jpg", sep = "")
ggsave(FileName, p1, width = 8, height =8,limitsize = FALSE)
FileName <- paste(clupath,"heatap_cluster", ".pdf", sep = "")
ggsave(FileName, p1, width = 8 , height = 8,limitsize = FALSE)

FileName <- paste(clupath,"bubble_cluster", ".jpg", sep = "")
ggsave(FileName, p2, width = 8, height =8,limitsize = FALSE)
FileName <- paste(clupath,"bubble_cluster", ".pdf", sep = "")
ggsave(FileName, p2, width = 8 , height = 8,limitsize = FALSE)

dat = res[4]
FileName <- paste(clupath,"clu_data.csv", sep = "")
write.csv(dat,FileName)


#-----差异代谢物#----------
source("G:\\三人成师-培训资料汇总\\第6期\\GC-MS\\wlxSuper_GCMS.R")
alppath = paste(repath,"/All_different_metabolites/",sep = "")
dir.create(alppath)

#--非参数检验
result1 = statSuper(ps = ps_ms,group  = "Group",artGroup = NULL,method = "wilcox")
head(result)
FileName <- paste(alppath,"/data_wlx_all.compounds.csv", sep = "")
write_excel_csv(result1,FileName)
colnames(result1)


result1 =  read.csv(FileName) 
nrow(result1)
wlx = result1 %>% filter(ck_rs_Pvalue< 0.05)
nrow(wlx)

result1$Row.names
#--t检验检验--建议四个重复以上
result = statSuper(ps = ps_ms,group  = "Group",artGroup = NULL,method = "ttext")
head(result)
FileName <- paste(alppath,"/data_ttest_all.compounds.csv", sep = "")


write_excel_csv(result,FileName)

result  =  read.csv(FileName)
# %>% filter(ck_rs_fdr< 0.05)
nrow(result)
result1$Row.names[!result1$Row.names %in% result$Row.names]

# 展示3组 物质的利用情况----------
head(result )
library(dplyr)
colnames(result)

result1 =  result %>% 
  # filter(ck_rs_fdr< 0.05) %>%
  # filter( rs_sym_fdr< 0.05) %>%  
  filter( HMDB !="NA") %>% select(1:17,ck,rs, sym,sin, ck_rs_log2_FC,rs_sym_log2_FC,Super.Class,rs_sin_log2_FC)%>%
  filter(!Super.Class %in% c("Hydrocarbon derivatives","Organohalogen compounds","Organophosphorus compounds","Organic 1,3-dipolar compounds",
                             "Organosulfur compounds",
                             "Lignans, neolignans and related compounds"))




table(result1$Super.Class )

nrow(result1)

# rs 和ck 比显著降低的ck_rs_log2_FC 》0，且，rs 和sym 比显著升高的》0 
# result2 = result1 %>% filter(    ck_rs_log2_FC >0.1) %>% filter(rs_sym_log2_FC > 0.1) 
# 
# # 且的话太明显了，试下或
# result2 = result1 %>% filter(ck_rs_log2_FC >0.1 |rs_sym_log2_FC > 0 &rs_sin_log2_FC < 0 ) 


result2 = result1 %>% filter( ck_rs_log2_FC >0 & rs_sin_log2_FC < 0 ) 

nrow(result2)


data_sorted = result2
data_sorted$ms=  paste("ms",1:nrow(data_sorted),sep = "_")


# FileName <- paste(alppath,"/heatmap_4组.csv", sep = "")
# write_excel_csv(data_sorted,FileName)

head(data_sorted)

data_sorted
# 
# FileName <- paste(alppath,"/heatmap.csv", sep = "")
# write_excel_csv(data_sorted,FileName)

# 将数据转换为矩阵，并排除非数值列

data_sorted$Category %>% unique()
data = data_sorted %>% 
  # filter(Category!="unidentified") %>%
  na.omit()


# 加载必要的包


# 查看数据结构（可选）
str(data)

# 提取用于绘图的数值型数据矩阵，并排除非数值列（假设这些列为注释列）
data_matrix <- as.matrix(data[, !(names(data) %in% c("Row.names", "ck_rs_log2_FC", "ck_rs_fdr", "Category", "Category.(Chinese)", "ms",
                                                     "Chinese.Name","Super.Class",  "ck"  ,"rs", "sym","ck_rs_log2_FC"  ,"rs_sym_log2_FC",
                                                     "sin","rs_sin_log2_FC"))])
head(data_matrix)


# 设置行名为 `ms` 列（假设 `ms` 列表示行名）
rownames(data_matrix) <- data$ms

data_matrix_zscore <- t(scale(t(data_matrix)))
# data_matrix_zscore <-scale(data_matrix)
# 创建行注释，根据 Category 分割行
row_split <- data$Super.Class

column_split <- factor(sub("_\\d+$", "", colnames(data_matrix_zscore)))

# 打印检查列分割信息

# 定义热图颜色渐变
#col_fun <- colorRamp2(c(min(data_matrix_zscore), 0, max(data_matrix_zscore)), c("blue", "white", "red"))
# `YlGnBu` 或 `RdBu`
color_palette <- colorRampPalette(rev(brewer.pal(9, "PuOr")))(50)  # 红蓝渐变色，适合科研论文配色

# category_colors <- c(
#   "alcohols" = "orange",
#   "amino acids and amides" = "blue",
#   "esters" = "green",
#   "long chain carbon organic acids" = "purple",
#   "nucleotides" = "red",
#   "short chain carbon organic acids" = "pink",
#   "sugars" = "brown"
# )
# 定义每个类别的颜色，可以自定义更多颜色映射
data$Super.Class %>% unique()
display.brewer.all()

brewer.pal(12,"Paired")

"#A6CEE3" "#1F78B4" "#B2DF8A" "#33A02C" "#FB9A99" "#E31A1C" "#FDBF6F" "#FF7F00" "#CAB2D6" "#6A3D9A" "#FFFF99" "#B15928"
# category_colors <- c(
#   "Lipids and lipid-like molecules" = "orange",
#   "Organic acids and derivatives" = "#A6CEE3",
#   "Phenylpropanoids and polyketides" = "#33A02C",
#   "Organic oxygen compounds" = "purple",
#   "Organoheterocyclic compounds" = "#B15928",
#   "Alkaloids and derivatives" = "pink",
#   "Benzenoids" = "brown",
#   "Organophosphorus compounds" = "yellow",
#   "Lignans, neolignans and related compounds" = "#FF7F00",
#   "Organic nitrogen compounds" = "#B2DF8A",
#   "Organosulfur compounds" = "gray",
#   "Nucleosides, nucleotides, and analogues" = "#1F78B4",
#   "Hydrocarbon derivatives" = "violet"
#   #  "Unknown" = "lightgray"  # 未知类别的颜色
# )
# 
# 
table(data$Super.Class)

unique_categories <- unique(data$Super.Class)
num_categories <- length(unique_categories)

category_colors <- setNames(brewer.pal(num_categories, c("Set3")), unique_categories)


left_annotation <- rowAnnotation(
  Category = data$Super.Class,
  col = list(Category = category_colors),
  border = TRUE
)
# 绘制按照 Category 分割的热图
# pdf(paste(alppath,"/heatmap_output.pdf", sep = ""), 
#     width = 10, height = 15, family = "SimHei")
# font_add("DejaVu Sans", regular = "DejaVuSans.ttf")  # 请确保 DejaVu Sans 字体存在，或替换为其他字体文件路径
# showtext_auto() 
getwd()


pdf(paste(alppath,"/4组热图不聚类.pdf", sep = ""), width =7, height =15)

Heatmap(
  data_matrix_zscore,
  name = "z-score",
  col = color_palette,
  # rect_gp = gpar(col = "grey50", ## 设置颜色
  #                lwd = 0.5),
  show_row_names = F,
  show_column_names = TRUE,
  row_split = row_split,  # 根据 Category 分割行
  column_split = column_split,
  left_annotation = left_annotation,
  cluster_rows =F,  # 是否对行进行聚类
  cluster_columns = F,  # 是否对列进行聚类
  row_title = "Genes",
  column_title = "Samples",
  border = TRUE,
  gpar(col = "black", lwd = 0.5),
  row_gap = unit(1, "mm"),  # 设置行分割间距
  column_gap = unit(1.5, "mm")
  # dendrogram_param = list(
  #   row = list(gp = gpar(lwd = 2)),  # 设置行聚类树线条粗细
  #   column = list(gp = gpar(lwd = 2))  # 设置列聚类树线条粗细
  # )
  #row_dend_width = unit(3, "mm"),  # 设置行聚类树的线条宽度
  #column_dend_height = unit(3, "mm")
  # 
  #  row_names_gp = gpar(fontsize = 10)
)


dev.off()


#  气泡图绘制-------
colnames(result ) KEGG.COMPOUND.ID
# 筛选Rs显著利用的 以及 这些在sym 同样显著利用的
res1 = result  %>% 
  # filter(ck_rs_fdr< 0.05) %>%
  # filter( rs_sym_fdr< 0.05) %>%  
  #  filter( HMDB !="NA") %>% 
  select(1:17,ck,rs, sym,sin, ck_rs_Pvalue,ck_rs_log2_FC,rs_sym_log2_FC,Super.Class,rs_sin_log2_FC,KEGG.COMPOUND.ID, HMDB)%>%
  filter(!Super.Class %in% c("Hydrocarbon derivatives","Organohalogen compounds","Organophosphorus compounds","Organic 1,3-dipolar compounds",
                             "Organosulfur compounds",
                             "Lignans, neolignans and related compounds")) %>% select(Row.names,KEGG.COMPOUND.ID,HMDB, everything())



res2 = res1 %>%  filter(ck_rs_log2_FC >1.5)  %>% select(Row.names,KEGG.COMPOUND.ID,HMDB) %>% filter(KEGG.COMPOUND.ID != "NA"  | HMDB!= "NA" )




res2 = res1 %>%  filter(ck_rs_log2_FC >0.5  & ck_rs_Pvalue <0.05)  %>% select(Row.names,KEGG.COMPOUND.ID,HMDB) 
# %>% filter(KEGG.COMPOUND.ID != "NA" )






#  富集分析------

ann.kegg_xph= function (id) {
  mk = db.ms.kegg
  mk$allMetabolites = str_to_lower(mk$allMetabolites)
  id2 = gsub("[ ][0-9]", "", id)
  
  id2 = str_to_lower(id2)
  A = c()
  B = c()
  
  for (i in 1:length(id2)) {
    
    #  i=4
    a = id2[i]
    # a="glutamine"
    # 转义 a 中的特殊字符
    #  escaped_a <- stringr::str_replace_all(a, "([\\+\\-\\(\\)\\[\\]\\{\\}\\^\\$\\*\\?\\.])", "\\\\\\1")
    
    # 使用转义后的字符串进行匹配
    # tem <- mk %>% dplyr::filter(str_detect(allMetabolites, a))
    
    tem = mk %>% dplyr::filter(str_detect(allMetabolites , stringr::fixed(a)
    ))
    tem
    
    print(id2[i])
    
    if (dim(tem)[1] == 0) {
      A[i] = "NA"
      B[i] = "NA"
    }
    else {
      A[i] = tem$keggID[1]
      B[i] = tem$allMetabolites[1]
    }
  }
  
  
  tax = data.frame(ID = id, keggID = A, matchname = B)
  head(tax)
  
  return(tax)
}


library(EasyMultiOmics)
library(phyloseq)
library(tidyverse)
library(ggClusterNet)
library(ggrepel)
library(EasyMultiOmics.db)

res2$KEGG.COMPOUND.ID 



res2$Row.names =="Malonic acid"



# 4-Hydroxybenzoic acid"

id = res2$KEGG.COMPOUND.ID 


id = da2$X


tax1 = ann.kegg_xph(res2$Row.names)

tax2 =  tax1%>% filter(keggID!= "NA")

gsub("cpd:","",tax2$keggID) %in% res2$KEGG.COMPOUND.ID




res3$KEGG.COMPOUND.ID


tax3 = tax2[,1:2]


tax3[!c(gsub("cpd:","",tax3$keggID) %in% res3$KEGG.COMPOUND.ID),]







tax2 = id

library(dplyr)
library(phyloseq)
library(ggplot2)

#通路富集
library(EasyMultiOmics.db)
dat = db.compound.pathway.bins
head(dat)
colnames(dat)[1] = "compound"

head(allkeggid)
# total1 = dat %>% select(2, 1 )
# 
# colnames(tax_all)
# 
# 
# total2 = tax_all %>% select(2) %>% filter(keggID!= "NA")
# 
# total = total1 %>% filter(compound %in% total2$keggID)
# 
total = dat %>% select(2, 1 )


head(total)

id.tem =  tax2


x <- clusterProfiler::enricher(gene = paste("cpd:",id.tem,sep = ""), TERM2GENE = total, 
                               minGSSize = 1, pvalueCutoff = 2, 
                               qvalueCutoff = 2)


dat = as.data.frame(x@result)

df <- dat %>% arrange(desc(Count))
#  %>% 
# separate(GeneRatio, 
#          into = c("A", "B"), sep = "/") %>% mutate(A = as.numeric(A), 
#                                                    B = as.numeric(B)) %>% 
# mutate(count = A/B) %>% arrange(Count)


head(df)
row.names(df) = NULL
df$Description <- factor(df$Description, levels = c(df$Description %>% 
                                                      as.data.frame() %>% pull()))
colnames(df)
df$p.adjust
df$ID2 = df$ID %>% strsplit("[|]") %>% sapply(`[`, 1)
df$ID2 = gsub("path:", "", df$ID2)


tab = db.compound.pathway.dis
head(tab)

df2 = df %>% left_join(tab, by = c(ID2 = "V1")) %>% distinct(ID2, .keep_all = TRUE)
head(df2)
tem = df2 
head(df2)
laby = "enriched pathways"
df2$id = gsub("cpd:","",df2$geneID)

df2 <- df2 %>% arrange(p.adjust)

library(enrichplot)
dotplot(x,
        label_format=50,
        showCategory=20)


# 提取并计算背景基因数
df2$BgGeneCount <- as.numeric(sub(".*/", "", df2$BgRatio))

# 计算 Fold Enrichment
df2$FoldEnrichment <- (df2$Count / sum(df2$Count)) / (1 / df2$BgGeneCount)

# 计算 Rich Factor
df2$RichFactor <- df2$Count / df2$BgGeneCount

df2 = arrange(df2,RichFactor)

head(df2)



ggplot(df2, aes(x = reorder(V2, -p.adjust), y = -log10(p.adjust),  color = p.adjust)) +
  # geom_jitter(width = 0.01, alpha = 0.7) +
  geom_point(alpha = 0.7) +
  scale_color_gradient(low = "red", high = "blue") +
  coord_flip() +
  labs(x = "Pathway", y = "-log10(Adjusted P-value)", size = "Gene Count", color = "Adjusted P-value", title = "Pathway Enrichment Bubble Plot") +
  theme_minimal()+theme( axis.text = element_text(size = 16))




res_sym = res1 %>%  filter(ck_rs_log2_FC >1 & rs_sym_log2_FC >1)  %>% filter(KEGG.COMPOUND.ID != "NA"  | HMDB!= "NA" )

res_sym$Row.names
res2 $Row.names  %in% da5 $Row.names 

head(result1 )

# MetaboAnalystR 结果

#  展示的是 合成菌群的代谢富集

colnames(res2 )

res3 =  res1 %>% filter( KEGG.COMPOUND.ID!= "NA") %>% filter( ck_rs_log2_FC >0.5) %>% 
  filter(  rs_sym_log2_FC > 0) 

# res3 = res2 %>% filter( KEGG.COMPOUND.ID!= "NA") %>%  filter(ck_rs_log2_FC >1  )



write.csv(res3,"./res3.csv")

dat =  read.csv("./result_and_plot/GCMS_result_and_plot/富集/Download/msea_ora_result.csv")
data = dat

data$LogP <- -log10(data$Raw.p)

ggplot(data, aes(x = LogP, y = reorder(X, LogP), size = hits)) +
  geom_point( fill = "orange",color = "black",shape = 21) +
  labs(title = "Metabolic Pathway Enrichment Analysis",
       x = "-log10(p)",
       y = "Pathway",
       size = "Enrichment ratio") +
  theme_bw()+theme(  text = element_text(size = 15)
  )


top_data <- data %>%
  arrange(Raw.p) %>%
  slice(1:20)



# Plot with color gradient based on p-values
p = ggplot(top_data, aes(x = LogP, y = reorder(X, LogP), size = hits, fill = Raw.p)) +
  geom_point(shape = 21, color = "black") +
  scale_fill_gradient(low = "red", high = "blue", name = "p-value") +
  labs(title = "Top 20 Metabolic Pathways by Enrichment Analysis",
       x = "-log10(Raw p)",
       y = "Pathway",
       size = "Enrichment ratio") +
  theme_bw()+
  theme(  text = element_text(size = 20) )




da5 = read.csv(paste(alppath,"/代谢汇总2.csv", sep = ""))

da5 $Row.names %in% res2 $Row.names




# 筛选 青枯菌利用的， 同时被合成菌群利用的，但是没有被sin 利用的------

result 
colnames(res1)
colnames(result )
res2 = result  %>% 
  # filter(ck_rs_fdr< 0.05) %>%
  # filter( rs_sym_fdr< 0.05) %>%  
  #  filter( HMDB !="NA") %>% 
  select(1:17,ck,rs, sym,sin, ck_rs_Pvalue,ck_rs_log2_FC,rs_sym_log2_FC,Super.Class,rs_sin_log2_FC,KEGG.COMPOUND.ID, HMDB,Chinese.Name )%>%
  filter(!Super.Class %in% c("Hydrocarbon derivatives","Organohalogen compounds","Organophosphorus compounds","Organic 1,3-dipolar compounds",
                             "Organosulfur compounds",
                             "Lignans, neolignans and related compounds")) %>% select(Row.names,KEGG.COMPOUND.ID,HMDB, everything())%>%  
  filter(ck_rs_log2_FC >0)  %>%  filter(rs_sym_log2_FC >0)  %>%  filter(rs_sin_log2_FC < 0.5)   %>%
  filter(KEGG.COMPOUND.ID != "NA"  | HMDB!= "NA" ) 

write.csv(res2,"./res2.csv")


write_excel_csv(res2,"./res2.csv")





# 热图展示下rs和分泌物相比利用的物质----
# 这个分类不准确丢弃
# class2 = read.xlsx("./result_and_plot/GCMS_result_and_plot/All_different_metabolites/refined_classification.xlsx")
# head(class2)
# colnames(class2)[1] = "Row.names"
# colnames(class2)[2] = "Category"


colnames(wlx)
wlx2 = wlx %>% select(1:9,ck_rs_log2_FC,ck_rs_fdr,Chinese.Name,Super.Class)  %>% 
  merge(class2, by ="Row.names"  )
head(wlx2)
wlx2$Super.Class %>% unique()

data_sorted <- wlx2[order(wlx2$Category), ]
data_sorted$ms=  paste("ms",1:nrow(data_sorted),sep = "_")
head(data_sorted)

data_sorted

FileName <- paste(alppath,"/heatmap.csv", sep = "")
write_excel_csv(data_sorted,FileName)


# 全部代谢物-----
# 将数据转换为矩阵，并排除非数值列

data_sorted$Category %>% unique()
data = data_sorted %>% 
  # filter(Category!="unidentified") %>%
  na.omit()


# 加载必要的包
library(ComplexHeatmap)
library(circlize)
library(data.table)  # 用于快速读取数据
# library(showtext)  # 用于支持中文字符
library(RColorBrewer) 

# 查看数据结构（可选）
str(data)

# 提取用于绘图的数值型数据矩阵，并排除非数值列（假设这些列为注释列）
data_matrix <- as.matrix(data[, !(names(data) %in% c("Row.names", "ck_rs_log2_FC", "ck_rs_fdr", "Category", "Category.(Chinese)", "ms",
                                                     "Chinese.Name","Super.Class"))])
head(data_matrix)
# 设置行名为 `ms` 列（假设 `ms` 列表示行名）
rownames(data_matrix) <- data$ms

data_matrix_zscore <- t(scale(t(data_matrix)))
# data_matrix_zscore <-scale(data_matrix)
# 创建行注释，根据 Category 分割行
row_split <- data$Super.Class

column_split <- factor(sub("_\\d+$", "", colnames(data_matrix_zscore)))

# 打印检查列分割信息

# 定义热图颜色渐变
#col_fun <- colorRamp2(c(min(data_matrix_zscore), 0, max(data_matrix_zscore)), c("blue", "white", "red"))
# `YlGnBu` 或 `RdBu`
color_palette <- colorRampPalette(rev(brewer.pal(9, "PuOr")))(50)  # 红蓝渐变色，适合科研论文配色

# category_colors <- c(
#   "alcohols" = "orange",
#   "amino acids and amides" = "blue",
#   "esters" = "green",
#   "long chain carbon organic acids" = "purple",
#   "nucleotides" = "red",
#   "short chain carbon organic acids" = "pink",
#   "sugars" = "brown"
# )
# 定义每个类别的颜色，可以自定义更多颜色映射
data$Super.Class %>% unique()
display.brewer.all()

brewer.pal(12,"Paired")

"#A6CEE3" "#1F78B4" "#B2DF8A" "#33A02C" "#FB9A99" "#E31A1C" "#FDBF6F" "#FF7F00" "#CAB2D6" "#6A3D9A" "#FFFF99" "#B15928"
category_colors <- c(
  "Lipids and lipid-like molecules" = "orange",
  "Organic acids and derivatives" = "#A6CEE3",
  "Phenylpropanoids and polyketides" = "#33A02C",
  "Organic oxygen compounds" = "purple",
  "Organoheterocyclic compounds" = "#B15928",
  "Alkaloids and derivatives" = "pink",
  "Benzenoids" = "brown",
  "Organophosphorus compounds" = "yellow",
  "Lignans, neolignans and related compounds" = "#FF7F00",
  "Organic nitrogen compounds" = "#B2DF8A",
  "Organosulfur compounds" = "gray",
  "Nucleosides, nucleotides, and analogues" = "#1F78B4",
  "Hydrocarbon derivatives" = "violet"
  #  "Unknown" = "lightgray"  # 未知类别的颜色
)




left_annotation <- rowAnnotation(
  Category = data$Super.Class,
  col = list(Category = category_colors),
  border = TRUE
)
# 绘制按照 Category 分割的热图
# pdf(paste(alppath,"/heatmap_output.pdf", sep = ""), 
#     width = 10, height = 15, family = "SimHei")
# font_add("DejaVu Sans", regular = "DejaVuSans.ttf")  # 请确保 DejaVu Sans 字体存在，或替换为其他字体文件路径
# showtext_auto() 

p = Heatmap(
  data_matrix_zscore,
  name = "z-score",
  col = color_palette,
  # rect_gp = gpar(col = "grey50", ## 设置颜色
  #                lwd = 0.5),
  show_row_names = F,
  show_column_names = TRUE,
  row_split = row_split,  # 根据 Category 分割行
  column_split = column_split,
  left_annotation = left_annotation,
  cluster_rows =T,  # 是否对行进行聚类
  cluster_columns = TRUE,  # 是否对列进行聚类
  row_title = "Genes",
  column_title = "Samples",
  border = TRUE,
  gpar(col = "black", lwd = 0.5),
  row_gap = unit(1, "mm"),  # 设置行分割间距
  column_gap = unit(1.5, "mm")
  # dendrogram_param = list(
  #   row = list(gp = gpar(lwd = 2)),  # 设置行聚类树线条粗细
  #   column = list(gp = gpar(lwd = 2))  # 设置列聚类树线条粗细
  # )
  #row_dend_width = unit(3, "mm"),  # 设置行聚类树的线条宽度
  #column_dend_height = unit(3, "mm")
  # 
  #  row_names_gp = gpar(fontsize = 10)
)

draw(p)

dev.off()
heatmap_grob <- grid.grabExpr(draw(p))
# 将 `ComplexHeatmap` 转换为 `ggplot` 对象，并使用 ggsave 保存
library(ggplotify)
ggheatmap <- as.ggplot(heatmap_grob)

# 保存图形为 PDF
ggsave("heatmap_output_ggsave.pdf", plot = ggheatmap, width = 8, height = 15, device = cairo_pdf)


cairo_pdf('p.pdf', family = 'DejaVu Sans', width = 4.5, height = 15)
p




# 青枯菌代谢的--------
# 统计两种方法差异 前对后，-log 代表后对前富集
colnames(result)
# 我要筛选的是rs 降低的，及-log > 0
t_ms = result %>% select(Row.names,ck,rs,ck_rs_log2_FC,ck_rs_Pvalue,ck_rs_fdr,Chinese.Name,
                         HMDB,KEGG.COMPOUND.ID,Super.Class,Superclass.Chinese,Class.Chinese,Subclass.Chinese) %>% 
  filter(ck_rs_fdr < 0.05 & ck_rs_log2_FC > 1.5)

head(t_ms)
nrow(t_ms)

w_ms = result1 %>% select(Row.names,ck,rs,ck_rs_log2_FC,ck_rs_Pvalue,ck_rs_fdr,Chinese.Name,
                          HMDB,KEGG.COMPOUND.ID,Super.Class,Superclass.Chinese,Class.Chinese,Subclass.Chinese) %>% 
  filter(ck_rs_fdr < 0.05 & ck_rs_log2_FC > 1.5)
head(w_ms)
nrow(w_ms)
w_ms

FileName <- paste(alppath,"/rs代谢_t.csv", sep = "")
write_excel_csv(t_ms,FileName)

FileName <- paste(alppath,"/rs代谢__wlx.csv", sep = "")
write_excel_csv(w_ms,FileName)

# 匹配一下两种共有的
w_ms$Row.names 

id1 = intersect(w_ms$Row.names,t_ms$Row.names )
ta2 = tax %>% filter(MS2_name %in%  id1)

FileName <- paste(alppath,"/两组差异分析共有.csv", sep = "")
write_excel_csv(ta2,FileName)

# 糖的变化---
sugar_wlx = result1 %>% select(Row.names,ck,rs,ck_rs_log2_FC,ck_rs_Pvalue,ck_rs_fdr,Chinese.Name,
                               HMDB,KEGG.COMPOUND.ID,Super.Class,Superclass.Chinese,Class.Chinese,Subclass.Chinese) %>%
  filter(str_detect(Chinese.Name ,"糖"))%>% 
  filter(ck_rs_Pvalue < 0.05 )
sugar_wlx

sugar_t = result %>% select(Row.names,ck,rs,ck_rs_log2_FC,ck_rs_Pvalue,ck_rs_fdr,Chinese.Name,
                            HMDB,KEGG.COMPOUND.ID,Super.Class,Superclass.Chinese,Class.Chinese,Subclass.Chinese) %>%
  filter(str_detect(Chinese.Name ,"糖"))%>% 
  filter(ck_rs_Pvalue < 0.05 )
sugar_t

FileName <- paste(alppath,"/sugar_t.csv", sep = "")
write_excel_csv(sugar_t,FileName)

FileName <- paste(alppath,"/sugar_wlx.csv", sep = "")
write_excel_csv(sugar_wlx,FileName)

sugar_wlx$Row.names[!sugar_wlx$Row.names %in%sugar_t$Row.names]
sugar_t$Row.names[!sugar_wlx$Row.names %in%sugar_t$Row.names]

tax %>% filter(str_detect(Chinese.Name ,"糖"))

# 物质再分类-------
# 添加标签，RS代谢
da2 =  read.xlsx("./result_and_plot/GCMS_result_and_plot/All_different_metabolites/差异代谢汇总.xlsx")
da3 <- da2 %>%
  distinct(Row.names, .keep_all = TRUE)

da3

FileName <- paste(alppath,"/代谢汇总.csv", sep = "")
write_excel_csv(da3,FileName)

#  分类文件
# da4 =  read.xlsx("./result_and_plot/GCMS_result_and_plot/All_different_metabolites/物质分类表.xlsx")
# head(da4)
da4 = read.csv("./result_and_plot/GCMS_result_and_plot/All_different_metabolites/物质细分.txt")

head(da4)  
colnames(da4) = c("Row.names","Ch","class") 

head(da3)
da5 = merge(da3,da4,by ="Row.names")
# FileName <- paste(alppath,"/代谢汇总2.csv", sep = "")
# write_excel_csv(da5,FileName)

da5 = read.csv(paste(alppath,"/代谢汇总2.csv", sep = ""))

da5$class %>% unique()
x2 =  da5  %>% select(class)%>%
  group_by(class) %>%
  summarise(count = n()) %>%
  mutate(percentage = count / sum(count) * 100,
         label = paste0(round(percentage, 1), "%"))

x2 <- x2 %>%
  arrange(desc(percentage)) %>%  # 按百分比降序排列
  mutate(cum_percentage = cumsum(percentage),  # 累积和
         mid_percentage = cum_percentage - percentage / 2,  # 中间位置
         label = paste0(round(percentage, 1), "%"))  # 创建比例标签

# 创建实心圆饼图，并在图外添加比例文字
p=ggplot(x2, aes(x = 2, y = percentage, fill = reorder(class, percentage))) +
  geom_bar(stat = "identity", width = 1, color = "black") +  # 填充实心圆
  xlim(1, 3) +  # 增加 x 轴的范围以留出文本显示空间
  coord_polar("y", start = 0) +  # 使用极坐标绘制饼图
  labs(fill = "Level", y = "Percentage", x = NULL) +  # 添加标签
  theme_void() +  # 去掉背景和坐标轴
  theme(legend.position = "right") +  # 设置图例位置
  # 添加连接线段
  geom_segment(aes(x = 2, xend = 2.5, 
                   y = mid_percentage, yend = mid_percentage),
               color = "black", size = 0.6) +
  # 添加比例文字标签到图外
  geom_text(aes(x = 2.6, y = mid_percentage, label = class),  # 将比例文字放在 x = 2.6
            hjust = 0,  # 左对齐
            size = 5) +  # 设置字体大小
  # 添加内部比例文字标签
  geom_text(aes(x = 2, y = mid_percentage, label = label), 
            color = "black", size = 5) +  # 内部文字设置为白色，并加粗
  scale_fill_manual(values = scales::alpha(c(
    
    "#1F78B4","#B2DF8A","#33A02C","#FB9A99" ,"#B15928","#FDBF6F" ,"#A6CEE3","#CAB2D6"
    
  ), 0.75))+
  theme(legend.position = "none")
#  "#CAB2D6", "#6A3D9A", "#FFFF99"
p








FileName <- paste(alppath,"饼图.pdf", sep = "")
ggsave(FileName ,p, width = 6,height = 8)

#-----气泡热图-----
da5 %>%select(ck_rs_log2_FC,Row.names,class ) 
head(da5)
x2$class

da5$class = factor(da5$class, levels = x2$class)
# 按 class 分组，选择 ck_rs_log2_FC 前 10 名
library(tidyverse)
df_top10 <- da5 %>%
  group_by(class) %>%
  top_n(3, wt = ck_rs_log2_FC) %>%
  ungroup()
df_top10$class
library(ggrepel) 

p = ggplot(da5, aes(x = class, y = ck_rs_log2_FC, size = ck_rs_log2_FC, fill = class)) +
  geom_point(shape = 21, color = "black", alpha = 0.7, 
             position = position_jitter(width = 0.2, height = 0.3)) +  # 添加抖动，减少重叠
  scale_size_continuous(range = c(1, 13)) +  # 调整气泡大小范围
  # 使用 geom_text_repel 进一步减少文本标签重叠
  geom_text_repel(data = df_top10, aes(label = Row.names), 
                  size = 4, color = "black", 
                  nudge_x = 0.25,  # 增加标签与点的水平距离
                  direction = "y",  # 只在 y 轴方向调整标签位置
                  box.padding = 0.4,  # 文本框周围的填充，增加标签间距
                  point.padding = 0.3,  # 点和标签之间的填充，增加标签与气泡的距离
                  max.overlaps = 20,  # 允许的最大重叠数，适当调大避免省略标签
                  segment.size = 0.4,  # 连接线的粗细
                  segment.color = "grey50") + 
  #geom_text(data = df_top10, aes(label = Row.names), vjust = -1, size = 4) +  # 为前10个添加标签
  scale_fill_manual(values = c(
    "#A6CEE3", "#FDBF6F" ,"#B15928","#FB9A99" ,
    "#33A02C", "#B2DF8A", "#1F78B4" ,"#CAB2D6")) +  # 自定义颜色
  theme_bw() +  # 简洁主题+
  
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.x = element_text(angle = 45, hjust = 1)  # x轴标签倾斜45度
        # legend.position = "none"  # 隐藏图例
  ) 
p
FileName <- paste(alppath,"RS代谢_合并.pdf", sep = "")
ggsave(FileName ,p, width = 12,height = 10)

# ggplot(df, aes(x = class, y = ck_rs_log2_FC, size = ck_rs_log2_FC, fill = ck_rs_log2_FC)) +
#   geom_point(shape = 21, color = "black", alpha = 0.7, 
#              position = position_jitter(width = 0.15, height = 0.15)) +  # 添加轻微抖动，减少重叠
#   scale_size_continuous(range = c(4, 16),  # 将气泡大小范围调大
#                         trans = "sqrt") +  # 使用平方根变换，使大小差异更加明显
#   scale_fill_gradient(low = "#FFEDA0", high = "#F03B20") +  # 颜色从浅到深映射到FC值
#   geom_text_repel(data = df_top10, aes(label = Row.names), 
#                   size = 4, color = "black", 
#                   nudge_x = 0.25,  # 增加标签与点的水平距离
#                   direction = "y",  # 只在 y 轴方向调整标签位置
#                   box.padding = 0.4,  # 文本框周围的填充，增加标签间距
#                   point.padding = 0.3,  # 点和标签之间的填充，增加标签与气泡的距离
#                   max.overlaps = 20,  # 允许的最大重叠数，适当调大避免省略标签
#                   segment.size = 0.4,  # 连接线的粗细
#                   segment.color = "grey50") +  # 连接线的颜色
#   theme_minimal() +  # 简洁主题
#   theme(
#     axis.text.x = element_text(angle = 45, hjust = 1),  # x轴标签倾斜45度
#     legend.position = "right"  # 保留图例
#   ) +
#   labs(x = "Class", y = "ck_rs_log2_FC", title = "Bubble Heatmap: Top 10 by Class")

# 展示模块在各组间的变化------
colnames(da5)
da6 =da5%>% select(class,Row.names )
colnames(wlx)
wlx2 = wlx %>% select(1:17)  %>% 
  merge(da6 , by ="Row.names") 
colnames(wlx2)

head(wlx)                                                 

sum_all =wlx2 %>% 
  group_by(class) %>% 
  summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE)), .groups = "drop")
mean_all =wlx2 %>% 
  group_by(class) %>% 
  summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE)), .groups = "drop")

model = sum_all %>%  pivot_longer(cols = -class,    # Columns to pivot (excluding 'class')
                                  names_to = "Group",   # Name of the new column for variable names
                                  values_to = "Value") %>% 
  mutate(group= gsub("_.$","",Group)) %>% group_by(class,group) %>% 
  summarise(ab = mean(Value),se = sd(Value)) %>% arrange(group) %>% 
  ungroup()%>%
  mutate(group2 = rep(1:4,each  = 8),CI_lower = ab-se,CI_upper = ab+se)



ggplot(model, aes(x = group2, y = ab)) +  # 使用 id 作为 x 轴
  # 绘制第一条置信区间
  # geom_ribbon(aes(ymin = CI_lower, ymax = CI_upper), fill = "firebrick2", alpha = 0.2) + 
  # # 绘制第二条置信区间
  # geom_ribbon(aes(ymin = CI_lower2, ymax = CI_upper2), fill = "lightblue", alpha = 0.4) + 
  # 绘制第一条折线
  geom_line(aes(y = ab,color =class  ), size = 1.5)  

# 绘制第二条折线
geom_line(aes(y =Overall_Score2), color = 'grey60', size = 1.5, group = 1) + 
  geom_point(aes(y = Overall_Score2,color = ifelse(id <= 23, "grey40", "grey60")), size = 1.5) +
  #geom_point(aes(y = Overall_Score2), color = 'grey60', size = 2) + 
  # 设置 x 轴的标签
  #  scale_x_continuous(breaks = microbe_data_sorted$id, labels = microbe_data_sorted$Microbe) +  
  # scale_x_continuous(
  #   breaks = microbe_data_sorted$id[1:23], 
  #   labels = microbe_data_sorted$Microbe[1:23]
  # )+
  geom_point(aes(color = ifelse(id <= 23, "grey40", "grey60")), size = 1.5) +
  
  scale_color_identity() +
  theme_bw() +  # 使用白色背景主题
  theme(axis.text.x = element_text(hjust = 1)) +  # 旋转 x 轴标签
  labs(x = "Microbe", y = "Score", title = "Microbe Scores with Two Confidence Intervals")+
  theme(
    panel.background = element_rect(fill = "grey98"),
    plot.background = element_rect(fill = "grey98"),
    panel.grid.major.x =element_blank(),
    axis.line.x = element_line(color = "black"),
    axis.text = element_text(size=9, color="black"),
    axis.title.y =element_blank(),
    axis.title.x = element_blank(),
    axis.line.y = element_line(color = "black"),
    axis.ticks.x = element_blank())+
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())+
  # 为前23个点添加标签
  geom_text(
    data = microbe_data_sorted,  # 只显示前23个标签
    aes(label = Microbe), 
    vjust = -1,  # 控制标签位置
    color = "red",  # 标签颜色
    size = 3,  # 标签字体大小
    check_overlap = TRUE  # 避免标签重叠
  )

p

# 物质消减率-----

da5 = read.csv(paste(alppath,"/代谢汇总2.csv", sep = ""))
head(da5)
da5$ck_rs_log2_FC
da5$ck_rs_fdr

da6 = da5 %>% filter(ck_rs_fdr< 0.05)   %>% select(class,Row.names )


wlx3 = wlx %>% select(1,ck,sin,sym,rs,ck_rs_log2_FC )  %>% 
  merge(da6 , by ="Row.names") 


wlx4 <- wlx3 %>%
  mutate(
    sin_reduction = ifelse(((ck - sin) / ck) * 100 < 0, 0, ((ck - sin) / ck) * 100),
    sym_reduction = ifelse(((ck - sym) / ck) * 100 < 0, 0, ((ck - sym) / ck) * 100),
    rs_reduction = ifelse(((ck - rs) / ck) * 100 < 0, 0, ((ck - rs) / ck) * 100),
  )  %>%  arrange(desc(ck_rs_log2_FC))



mean(wlx4$sin_reduction)
mean(wlx4$sym_reduction)
mean(wlx4$rs)
colnames(wlx)
head(wlx4)

wlx5 = wlx4%>% select(class,class,
                      sin_reduction,
                      sym_reduction,
                      Row.names) %>% 
  pivot_longer(cols = c( 
    sin_reduction,
    sym_reduction
  ), 
  names_to = "Sample", values_to = "Value")

"#A6CEE3", "#FDBF6F" ,"#B15928",  "#FB9A99" ,"#33A02C", "#B2DF8A"
"#481e5f", "#1e8392", "#f5eb28"

head(wlx5)


# 物质排序按照LOGFC
colnames(da5)
wlx6 = da5 %>% select(Row.names, ck_rs_log2_FC) %>%
  merge(wlx5,by = "Row.names") %>%
  filter(Sample  %in% "sym_reduction")
arrange(ck_rs_log2_FC)

mean(wlx4$sin_reduction)
colnames(wlx5)


wlx6 %>% group_by(Sample) %>% filter(Value!= 0)  %>%  summarise(mean_代谢 = mean( Value))


wlx7 =wlx6 %>% group_by(class,Sample) %>% filter(Value!= 0)  %>%  summarise(mean_代谢 = mean( Value),sd =  sd(Value)) %>% arrange(Sample,mean_代谢)


mean(wlx7$mean_代谢)


p = ggplot(wlx7,aes(reorder( class ,mean_代谢),mean_代谢))+
  geom_point(aes(color=class,fill="black"),size=3,show.legend = F)+
  geom_line( aes(color= class,group =1),size=1)+
  theme_bw()+
  theme(axis.text.x = element_text(angle = 45,hjust = 1),
  )

FileName <- paste(alppath,"sym代谢率.pdf", sep = "")

ggsave(FileName ,p, width = 7,height = 5)


p=ggplot(wlx6, aes(x = Sample, y = reorder(Row.names,ck_rs_log2_FC),
                   fill = Value)) +
  geom_tile(color = "white", size = 0.5) +  # 使用白色边界线，并减小线条大小
  scale_fill_gradientn(colors = c("orange", "grey90"), 
                       values = c(0, 70)/70,  # 自定义颜色映射，<70为橙色，>=70为灰色
                       limits = c(0, 70), na.value = "grey90") +  # 控制颜色的渐变
  theme_minimal() +
  labs(title = "Heatmap of Substances by Class",
       x = NULL,  # 隐藏 x 轴标签
       y = NULL,  # 隐藏 y 轴标签
       fill = "Value") +
  # geom_text(aes(label =  ifelse(Value < 70, Row.names, ""), size = 3), size = 3) + 
  #geom_text(aes(label = Row.names), size = 3)+
  theme(axis.text.y = element_blank(),  # 隐藏纵轴的刻度
        axis.ticks.y = element_blank(),  # 隐藏纵轴的刻度线
        axis.ticks.x = element_blank(),  # 隐藏横轴的刻度线
        panel.grid = element_blank(),    # 移除网格线
        panel.spacing = unit(0.1, "lines")) +  # 减少面板之间的空隙
  facet_wrap(~ class, nrow = 1, scales = "free", strip.position = "bottom")  # 不同分面并排
p

FileName <- paste(alppath,"sym无标签.pdf", sep = "")
ggsave(FileName ,p, width = 15,height = 10)


# 代谢富集分析-----


# 纯物质对青枯菌致病力的影响--------




getwd()
library(ggplot2)
library(dplyr)
library(tidyr)
# dat2 =  read.xlsx("./data/代谢物测定/代谢物对青枯菌致病力/物质对青枯菌影响.xlsx",sheet = 4)



dat3 =  read.xlsx("./data/代谢物测定/代谢物对青枯菌致病力/物质对青枯菌影响.xlsx",sheet = 2)


# # dat3 <- dat3 %>%
# #   mutate(
# #     letter = str_extract(id, "^[A-Za-z]+"),   # 提取字母部分
# #     number = str_extract(id, "[0-9]+")        # 提取数字部分
# #   )
# head(dat3)
# dat4 =  dat3 %>% pivot_wider(id_cols = con,        # 将 con 作为 id 列，确保其不会被丢弃
#                               names_from = Me2,     # 使用 Me2 列的值作为新列名
#                               values_from = dim   )
# # head(dat2)
# # 
# # 先按找物质合并----
# dat2$id1
# 
# dat3 %>%  
# 

dat =  read.xlsx("./data/代谢物测定/代谢物对青枯菌致病力/物质对青枯菌影响.xlsx",sheet = 3)

head(dat)
data = dat 
# Reshape data to long format


data_long <- data %>%
  pivot_longer(cols = -c(id, Con), names_to = "Metabolite", values_to = "Value")

# data_long =  read.xlsx("./data/代谢物测定/代谢物对青枯菌致病力/物质对青枯菌影响.xlsx",sheet =2)

head(data_long)
data_long = data_long 

# %>% select(dim,3,4,5 )

#  colnames(data_long) =  c("Value" ,"Con" ,"Metabolite", "id")

# Calculate mean values for each Con group and Metabolite
mean_data <- data_long %>%
  group_by(Con, Metabolite) %>%
  summarize(MeanValue = mean(Value), .groups = "drop")

# Plot
data_long$Con
data_long$id = as.factor(data_long$id)

desired_order <- c("Ism","3-Hydroxybutyric.acid", "Adenine","Glutamate","Phenylalanine","Succinate","Sucrose",  "Trehalose",
                   "Valine", "Xanthine", "Mix" , "Sym","NB")

# 将 Metabolite 转换为因子，并指定顺序
data_long$Metabolite <- factor(data_long$Metabolite, levels = desired_order)
mean_data$Metabolite <- factor(mean_data$Metabolite, levels = desired_order)

p3 = ggplot(data_long, aes(x = Con, y = Value)) +
  geom_line( aes(group =  id),color = "gray") +  # Individual samples as gray lines
  geom_line(data = mean_data, aes(x = Con, y = MeanValue), color = "black", size = 1) +  # Mean line as black
  facet_wrap(~ Metabolite, scales = "free_y", nrow = 1) +
  labs(title = "Metabolite Concentrations by Con Group",
       x = "cmc",
       y = "Concentration") +
  theme_minimal()+
  theme(axis.ticks = element_blank(),
        axis.text.x = element_blank())+
  scale_y_continuous(labels = scales::number_format(accuracy = 0.01))


p5

# 
# p1+p2+p3+p4 +
#   scale_y_continuous(labels = scales::number_format(accuracy = 0.01))

library(patchwork)

# 假设 p1, p2, p3, p4 是四个 ggplot2 图形对象
# 使用 / 操作符将每个图放在一行
combined_plot <- p1 / p2 / p3 / p4/ p5
ggsave("./result_and_plot/GCMS_result_and_plot/单一物质的利用生长/combined_plot.pdf",combined_plot,width = 16,height = 8)

unique(data_long$Metabolite)


log10(data_long$Value)









#------代谢物通路富集分析#----------------
library(readxl)
library(GO.db)
library(DOSE)
library(GO.db)
library(GSEABase)
library(clusterProfiler)
library("GSVA")

id = read.delim("kegg.neg.txt")
head(id)
colnames(id)
dif = read.csv(paste0(diffpath,"/化合物t检验结果.csv"))
head(dif)
colnames(dif)[1] = "ID"
tem = dif %>% filter( fdr < 0.05, abs(log2_FC) > 0) %>% inner_join(id,by = "ID")
id.tem = tem$Kegg_ID %>% strsplit("[:]") %>%
  sapply( `[`, 2)


library(MetaboAnalystR)
BiocManager::install("OptiLCMS")
.libPaths()
install.packages("OptiLCMS")
enrichpath = paste(repath,"/enrich",sep = "")
dir.create(enrichpath)
tempath0 = getwd()
setwd(enrichpath)
# PID of current job: 55420
mSet<-InitDataObjects("conc", "pathora", FALSE)
cmpd.vec<- id.tem

mSet <- Setup.MapData(mSet, cmpd.vec);
mSet <- CrossReferencing(mSet, "kegg");
mSet <- CreateMappingResultTable(mSet)
mSet <- SetKEGG.PathLib(mSet, "ath", "current")
mSet <- SetMetabolomeFilter(mSet, F);
# mSet$api
mSet <- CalculateOraScore(mSet, "rbc", "hyperg")
mSet <- PlotPathSummary(mSet, F, "path_view_1_", "pdf", 72, width=NA)
mSet<-SaveTransformedData(mSet)
mSet<-PlotPathSummary(mSet, T, "path_view_1_", "png", 72, width=NA, NA, NA )

#--通路匹配的物质
tab = mSet$dataSet$map.table %>% as.data.frame()
head(tab)
# 富集的通路表格
tabpath = mSet$analSet$ora.mat %>% as.data.frame()


for (i in 1:nrow(tabpath)) {
  library(KEGGREST)
  # listDatabases()
  query <- keggGet(c(row.names(tabpath)[i]))
  id = query[[1]]$NAME
  com = query[[1]]$COMPOUND
  datfil = tab %>% filter(KEGG  %in% names(com))
  tempath = paste("./",id,sep = "")
  fs::dir_create(tempath)
  write.csv(datfil,paste(tempath,"/conpound_reaction.csv",sep = ""),quote = FALSE)
}


# 富集的通路表格
dt = mSet$analSet$ora.mat %>% as.data.frame()
head(dt)

tem = mSet$analSet$ora.hits
A = c()
B = c()
C = c()
for (i in 1:length(names(tem))) {
  tem2 = tem[[names(tem)[i]]] %>% length()
  if (tem2 != 0) {
    A[i] = names(tem)[i]
    B[i] = tem[[names(tem)[i]]] %>% names() %>% str_c( collapse = "|")
    C[i] = tem[[names(tem)[i]]]  %>% str_c( collapse = "|")
  }
}

tem3 = data.frame(ID = A,name = B,kegg = C) %>% filter(!is.na(kegg))
head(tem3)
write_csv(tem3,paste0("./pathwat_contain.conpounds.csv"))


p1 <- ggplot(dt, aes(x =Impact, y = `-log(p)`))  +
  geom_point(pch = 21,aes(fill=`-log(p)`,size =`-log(p)`))  +
  ggrepel::geom_text_repel(aes(x = Impact, y = `-log(p)`,label= row.names(dt))) +
  scale_fill_gradientn(colours =colorRampPalette(c("#F7F4F9","#FFFF33","#EE0000FF","#EE0000FF","#EE0000FF","#EE0000FF"))(60)) +
  theme_classic()
p1

ggsave(paste0("./compound.to.kegg.koplot.pdf"),p1,width = 8,height = 7)
ggsave(paste0("./compound.to.kegg.ko.png"),p1,width = 8,height = 7)

setwd(tempath0)

