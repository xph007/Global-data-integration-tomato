# machine learning--------
ps0 = base::readRDS("./data/16s/ps_filter.rds")
library(randomForest)
library(caret)
library(ROCR) ##用于计算ROC
library(e1071)
library(tidyverse)
library(ggClusterNet)
otu = otu_table(ps0)  %>% as.data.frame()

library(openxlsx)
dat2 =  read.xlsx("./result_and_plot/Diversity_Micro/机器学习/建模剔除GENUS.xlsx")
ps = filter_taxa(ps0, function(x) sum(x) > 0 , TRUE) 

# 数据处理-----
ps7 = tax_glom_wt(ps, "Genus")%>% subset_taxa(!Genus %in% dat2$id  ) 
tax_table(ps7)  %>% row.names()
# 转换相对丰度
ps7  = transform_sample_counts(ps7, function(x) x / sum(x) );ps7
otutab = as.data.frame(t(vegan_otu(ps7)))
# 每一个属单独建模------


microbes <- names(otutab_t)[-which(names(otutab_t) == "group")] 

# 初始化结果数据框，用于存储每个属的指标
result_df <- data.frame()
# microbe  = "Ralstonia"
# 遍历每个微生物属，进行单独建模
for (microbe in microbes) {
  # 为当前的微生物属创建一个子集数据框，只包含 group 和当前的微生物丰度
  microbe_data <- otutab_t[, c("group", microbe)]
  
  # 重命名列名为统一格式，方便后续代码一致性
  colnames(microbe_data) <- c("group", "abundance")
  
  # 划分训练集和测试集
  set.seed(123)  # 保证随机性一致
  train_index <- createDataPartition(microbe_data$group, p = 0.7, list = FALSE)
  train_data <- microbe_data[train_index, ]
  test_data <- microbe_data[-train_index, ]
  
 
  temp_model <- randomForest(group ~ abundance, data = train_data, importance = TRUE, proximity = TRUE)
  
  oob_error <- temp_model$err.rate[nrow(temp_model$err.rate), "OOB"]
  
 
  predicted <- predict(temp_model, newdata = test_data, type = "response")
  prob <- predict(temp_model, newdata = test_data, type = "prob")[, 2]  # 概率预测
  
 
  accuracy <- mean(predicted == test_data$group)
  
  
  roc_obj <- roc(test_data$group, predicted_prob[, 2], levels = c("Disease", "Health"), direction = "<")
  
  
  auc_value <- auc(roc_obj)
  
  # 计算混淆矩阵并提取指标
  cm <- confusionMatrix(predicted, test_data$group)
  recall <- cm$byClass["Recall"]
  precision <- cm$byClass["Precision"]
  f1_score <- cm$byClass["F1"]
  
  # 提取 Kappa 值
  kappa_value <- cm$overall["Kappa"]
  
  # 将结果存储到数据框
  result_df <- rbind(result_df, data.frame(
    Microbe = microbe,
    Accuracy = accuracy,
    AUC = auc_value,
    Recall = recall,
    Precision = precision,
    F1_Score = f1_score,
    OOB_Error = oob_error,
    Kappa = kappa_value
    
  ))
}

# 输出结果
print(result_df)
otu2_transposed

otu2_transposed$ Microbe =  row.names(otu2_transposed)

dat =  merge(otu2_transposed,result_df,by = "Microbe")

dat 
colnames(dat)


# 按照权重排序
weights <- c(Accuracy = 0.1, AUC = 0.3, Recall = 0.3, Precision = 0.1, F1_Score = 0.15, OOB_Error = 0.05, Kappa = 0.05)


result_df <- dat %>%
  mutate(Overall_Score = 
           weights["Accuracy"] * Accuracy +
           weights["AUC"] * AUC +
           weights["Recall"] * Recall +
           weights["Precision"] * Precision +
           weights["F1_Score"] * F1_Score +
           weights["OOB_Error"] * (1 - OOB_Error) +  # OOB_Error 越小越好，因此使用 (1 - OOB_Error)
           weights["Kappa"] * Kappa) 


# 按综合评分排序
result_df <- result_df %>% arrange(desc(Overall_Score)) %>% select(Microbe,Overall_Score,everything())



# 循环计算10次------

# 初始化结果数据框
result_df <- data.frame()


microbes <- names(otutab_t)[-which(names(otutab_t) == "group")] 


# 重复 10 次实验


for (i in 1:10) {
  
  for (microbe in microbes) {
 
    microbe_data <- otutab_t[, c("group", microbe)]
    
   
    colnames(microbe_data) <- c("group", "abundance")
    
    # 划分训练集和测试集
    set.seed(i+1)  # 保证随机性一致
    train_index <- createDataPartition(microbe_data$group, p = 0.7, list = FALSE)
    train_data <- microbe_data[train_index, ]
    test_data <- microbe_data[-train_index, ]
    
    # 构建随机森林模型
    temp_model <- randomForest(group ~ abundance, data = train_data, importance = TRUE, proximity = TRUE)
    # 计算OOB误差率
    oob_error <- temp_model$err.rate[nrow(temp_model$err.rate), "OOB"]
    
    # 在测试集上进行预测
    predicted <- predict(temp_model, newdata = test_data, type = "response")
    prob <- predict(temp_model, newdata = test_data, type = "prob")[, 2]  # 概率预测
    
    # 计算指标：准确率、AUC、混淆矩阵指标（召回率、精确率、F1分数）
    accuracy <- mean(predicted == test_data$group)
    
    # 计算 AUC
    roc_obj <- roc(test_data$group, prob, levels = c("Disease", "Health"), direction = "<")
    auc_value <- auc(roc_obj)
    
    # 计算混淆矩阵并提取指标
    cm <- confusionMatrix(predicted, test_data$group)
    recall <- cm$byClass["Recall"]
    precision <- cm$byClass["Precision"]
    f1_score <- cm$byClass["F1"]
    
    # 提取 Kappa 值
    kappa_value <- cm$overall["Kappa"]
    
    # 将每次实验的结果暂时存储到 result_df 数据框
    result_df <- rbind(result_df, data.frame(
      Microbe = microbe,
      Accuracy = accuracy,
      AUC = auc_value,
      Recall = recall,
      Precision = precision,
      F1_Score = f1_score,
      OOB_Error = oob_error,
      Kappa = kappa_value,
      Run = i  # 标记当前重复次数
    ))
    
  }
}

# 汇总每个微生物的均值和标准差
summary_df <- result_df %>%
  group_by(Microbe) %>%
  summarise(
    Accuracy_Mean = mean(Accuracy),
    Accuracy_SD = sd(Accuracy),
    AUC_Mean = mean(AUC),
    AUC_SD = sd(AUC),
    Recall_Mean = mean(Recall),
    Recall_SD = sd(Recall),
    Precision_Mean = mean(Precision),
    Precision_SD = sd(Precision),
    F1_Score_Mean = mean(F1_Score),
    F1_Score_SD = sd(F1_Score),
    OOB_Error_Mean = mean(OOB_Error),
    OOB_Error_SD = sd(OOB_Error),
    Kappa_Mean = mean(Kappa),
    Kappa_SD = sd(Kappa)
  )

# 输出汇总结果
print(summary_df)


summary_df[is.na(summary_df)]=0


otu2_transposed$Microbe =  row.names(otu2_transposed)

dat =  merge(otu2_transposed,summary_df,by = "Microbe")
dat 
colnames(dat)


# 按照权重排序
weights <- c(Accuracy_Mean = 0.1, AUC_Mean = 0.3, Recall_Mean = 0.3, Precision_Mean = 0.1, F1_Score_Mean = 0.15, OOB_Error_Mean = 0.05, Kappa_Mean = 0.05)


result_df <- dat %>%
  mutate(Overall_Score = 
           weights["Accuracy_Mean"] * Accuracy_Mean +
           weights["AUC_Mean"] * AUC_Mean +
           weights["Recall_Mean"] * Recall_Mean +
           weights["Precision_Mean"] * Precision_Mean +
           weights["F1_Score_Mean"] * F1_Score_Mean +
           weights["OOB_Error_Mean"] * (1 - OOB_Error_Mean) +  # OOB_Error 越小越好，因此使用 (1 - OOB_Error)
           weights["Kappa_Mean"] * Kappa_Mean) 


# 按综合评分排序
result_df <- result_df %>% arrange(desc(Overall_Score)) %>% select(Microbe,Overall_Score,everything())
# 按照排序，依次叠加建模-------

ord = read.csv("./result_and_plot/Diversity_Micro/机器学习/重复10次genus建模.csv") %>% na.omit()
microbes <- ord $Microbe


# 初始化结果数据框
result_df <- data.frame()

# 重复 10 次实验
for (i in 1:10) {
  # 设置随机种子以确保不同实验结果不同
  set.seed(i)
  
  # 初始化一个空的特征集
  current_features <- c()
  
  # 按顺序叠加微生物属
  # j= 1
  for (j in 1:length(microbes)) {
    # 每次增加一个微生物
    current_features <- c(current_features, microbes[j])
    
    # 创建数据子集：包含 group 和当前叠加的微生物属
    microbe_data <- otutab_t[, c("group", current_features)]
    
    # 划分训练集和测试集
    train_index <- createDataPartition(microbe_data$group, p = 0.7, list = FALSE)
    train_data <- microbe_data[train_index, ]
    test_data <- microbe_data[-train_index, ]
    
    # 构建随机森林模型
    temp_model <- randomForest(group ~ ., data = train_data, importance = TRUE, proximity = TRUE)
    
    # 计算 OOB 误差率
    oob_error <- temp_model$err.rate[nrow(temp_model$err.rate), "OOB"]
    
    # 在测试集上进行预测
    predicted <- predict(temp_model, newdata = test_data, type = "response")
    prob <- predict(temp_model, newdata = test_data, type = "prob")[, 2]  # 概率预测
    
    # 计算指标：准确率、AUC、混淆矩阵指标（召回率、精确率、F1分数）
    accuracy <- mean(predicted == test_data$group)
    
    # 计算 AUC
    roc_obj <- roc(test_data$group, prob, levels = c("Disease", "Health"), direction = "<")
    auc_value <- auc(roc_obj)
    
    # 计算混淆矩阵并提取指标
    cm <- confusionMatrix(predicted, test_data$group)
    recall <- cm$byClass["Recall"]
    precision <- cm$byClass["Precision"]
    f1_score <- cm$byClass["F1"]
    
    # 提取 Kappa 值
    kappa_value <- cm$overall["Kappa"]
    
    # 将每次实验的结果存储到 result_df 数据框
    result_df <- rbind(result_df, data.frame(
      Microbe_Count = j,  # 当前叠加的微生物数
      Microbes = paste(current_features, collapse = ", "),  # 当前使用的微生物列表
      Accuracy = accuracy,
      AUC = auc_value,
      Recall = recall,
      Precision = precision,
      F1_Score = f1_score,
      OOB_Error = oob_error,
      Kappa = kappa_value,
      Run = i  # 标记当前重复次数
    ))
  }
}


# 汇总每个微生物组合的均值和标准差
summary_df <- result_df %>%
  group_by(Microbe_Count, Microbes) %>%
  summarise(
    Accuracy_Mean = mean(Accuracy),
    Accuracy_SD = sd(Accuracy),
    AUC_Mean = mean(AUC),
    AUC_SD = sd(AUC),
    Recall_Mean = mean(Recall),
    Recall_SD = sd(Recall),
    Precision_Mean = mean(Precision),
    Precision_SD = sd(Precision),
    F1_Score_Mean = mean(F1_Score),
    F1_Score_SD = sd(F1_Score),
    OOB_Error_Mean = mean(OOB_Error),
    OOB_Error_SD = sd(OOB_Error),
    Kappa_Mean = mean(Kappa),
    Kappa_SD = sd(Kappa)
  )

# 输出汇总结果
print(summary_df)

# 按照权重排序

weights <- c(Accuracy_Mean = 0.1, AUC_Mean = 0.3, Recall_Mean = 0.3, Precision_Mean = 0.1, F1_Score_Mean = 0.15, OOB_Error_Mean = 0.05, Kappa_Mean = 0.05,
             Accuracy_SD = 0.1, AUC_SD = 0.3, Recall_SD = 0.3, Precision_SD = 0.1, F1_Score_SD = 0.15, OOB_Error_SD = 0.05, Kappa_SD = 0.05)

# dat =  merge(otu2_transposed,summary_df,by = "Microbe")
summary_df[is.na(summary_df)]=0


result_df <- summary_df %>%
  mutate(Overall_Score_SD = 
           weights["Accuracy_SD"] * Accuracy_SD +
           weights["AUC_SD"] * AUC_SD +
           weights["Recall_SD"] * Recall_SD +
           weights["Precision_SD"] * Precision_SD +
           weights["F1_Score_SD"] * F1_Score_SD +
           weights["OOB_Error_SD"] * (1 - OOB_Error_SD) +  # OOB_Error 越小越好，因此使用 (1 - OOB_Error)
           weights["Kappa_SD"] * Kappa_SD) %>% 
  mutate(Overall_Score = 
           weights["Accuracy_Mean"] * Accuracy_Mean +
           weights["AUC_Mean"] * AUC_Mean +
           weights["Recall_Mean"] * Recall_Mean +
           weights["Precision_Mean"] * Precision_Mean +
           weights["F1_Score_Mean"] * F1_Score_Mean +
           weights["OOB_Error_Mean"] * (1 - OOB_Error_Mean) +  # OOB_Error 越小越好，因此使用 (1 - OOB_Error)
           weights["Kappa_Mean"] * Kappa_Mean)

# 按综合评分排序
result_df2 <- result_df %>% arrange(Microbe_Count) %>% 
  select(Microbe_Count,Microbes,Overall_Score,Overall_Score_SD,everything())

result_df2 

head(result_df2)
result_df3  = result_df2 %>%
  mutate(Overall_Score_SD =  weights["Accuracy_SD"] * Accuracy_SD +
           weights["AUC_SD"] * AUC_SD +
           weights["Recall_SD"] * Recall_SD +
           weights["Precision_SD"] * Precision_SD +
           weights["F1_Score_SD"] * F1_Score_SD +
           weights["OOB_Error_SD"] * (1 - OOB_Error_SD) +  # OOB_Error 越小越好，因此使用 (1 - OOB_Error)
           weights["Kappa_SD"] * Kappa_SD) %>% select(2,3 ,23,24,25)
ncol(result_df3)

microbe_data  = result_df3 
head(microbe_data)
microbe_data$CI_lower <- microbe_data$Overall_Score - (microbe_data$Overall_Score_SD * 0.6)
microbe_data$CI_upper <- microbe_data$Overall_Score +  (microbe_data$Overall_Score_SD * 0.6)

microbe_data$CI_lower2 <- microbe_data$Overall_Score2 -  (microbe_data$Overall_Score_SD2 * 0.6)
microbe_data$CI_upper2<-  microbe_data$Overall_Score2 + (microbe_data$Overall_Score_SD2 * 0.6)

# Plot with confidence intervals
library(lubridate)

microbe_data_sorted <- microbe_data %>%
  arrange(desc(Overall_Score))

microbe_data_sorted$id =  1:nrow(microbe_data_sorted)


microbe_data_sorted$color_group <- ifelse(microbe_data_sorted$id <= 23, "grey20", "grey60")  # 前23个点标记为红色

# ggplot(microbe_data_sorted, aes(x = id, y = Overall_Score)) +  # 使用 id 作为 x 轴
#   # 绘制第一条置信区间
#   geom_ribbon(aes(ymin = CI_lower, ymax = CI_upper), fill = "firebrick2", alpha = 0.2) + 
#   # 绘制第二条置信区间
#   geom_ribbon(aes(ymin = CI_lower2, ymax = CI_upper2), fill = "lightblue", alpha = 0.4) + 
#   # 绘制第一条折线
#   geom_line(aes(y = Overall_Score), color = 'grey60', size = 1.5, group = 1) +  
#  #  geom_point(aes(y = Overall_Score), color = 'grey60', size = 2) +   
#   # 绘制第二条折线
#   geom_line(aes(y =Overall_Score2), color = 'grey60', size = 1.5, group = 1) + 
#   geom_point(aes(y = Overall_Score2, x = id, color = ifelse(id <= 23, "grey40", "grey60")), 
#              size = 1.5, alpha = ifelse(df$id <= 24, 1, 0))+
#   geom_point(aes(y = Overall_Score2,color = ifelse(id <= 24, "grey40", "grey60")), size = 1.5) +
#   #geom_point(aes(y = Overall_Score2), color = 'grey60', size = 2) + 
#   # # 设置 x 轴的标签
#   #  scale_x_continuous(breaks = microbe_data_sorted$id, 
#   #                     labels = microbe_data_sorted$Microbe) +  
#   # scale_x_continuous(
#   #   breaks = microbe_data_sorted$id[1:23], 
#   #   labels = microbe_data_sorted$Microbe[1:23]
#   # )+
#   geom_point(aes(color = ifelse(id <= 24, "grey40", "grey60")), size = 1.5) +
#   scale_color_identity() +
#   theme_bw() +  # 使用白色背景主题
#   theme(axis.text.x = element_text(hjust = 1)) +  # 旋转 x 轴标签
#   labs(x = "Microbe", y = "Score", title = "Microbe Scores with Two Confidence Intervals")+
#   theme(
#     panel.background = element_rect(fill = "grey98"),
#     plot.background = element_rect(fill = "grey98"),
#     panel.grid.major.x =element_blank(),
#     axis.line.x = element_line(color = "black"),
#     axis.text = element_text(size=10, color="black",angle=90,hjust = 1,vjust = .5),
#     axis.title.y =element_blank(),
#     axis.title.x = element_blank(),
#     axis.line.y = element_line(color = "black"),
#     axis.ticks.x = element_blank())+
#   theme(panel.grid.major = element_blank(),
#          panel.grid.minor = element_blank())
#   


microbe_data_sorted$id <- ifelse(microbe_data_sorted$id <= 23, microbe_data_sorted$id * 2,
                                 46 + (microbe_data_sorted$id - 23) )

microbe_data_sorted$nudge_direction <- ifelse(microbe_data_sorted$id %% 4 == 0,
                                              0.15, -0.2)
p =ggplot(microbe_data_sorted, aes(x = id, y = Overall_Score)) +
  # 绘制第一条置信区间
  geom_ribbon(aes(ymin = CI_lower, ymax = CI_upper), fill = "firebrick2", alpha = 0.2) + 
  # 绘制第二条置信区间
  geom_ribbon(aes(ymin = CI_lower2, ymax = CI_upper2), fill = "lightblue", alpha = 0.4) + 
  # 绘制第一条折线
  geom_line(aes(y = Overall_Score), color = 'grey60', size = 1.5, group = 1) +  
  # 绘制第二条折线
  geom_line(aes(y = Overall_Score2), color = 'grey60', size = 1.5, group = 1) + 
  # 绘制前 24 个点
  geom_point(data = microbe_data_sorted[microbe_data_sorted$id <= 46, ],
             aes(y = Overall_Score2, x = id, color = ifelse(id <= 46, "grey40", "grey60")),
             size = 1.5) +
  geom_point(data = microbe_data_sorted[microbe_data_sorted$id <= 46, ],
             aes( color = ifelse(id <= 46, "grey40", "grey60")),
             size = 1.5) +
  # 使用指定颜色显示
  scale_color_identity() +
  # # 设置 x 轴的标签，显示前 24 个微生物名称
  # scale_x_continuous(
  #   breaks = microbe_data_sorted$id[1:24], 
  #   labels = microbe_data_sorted$Microbe[1:24])+
  scale_color_identity() +
  theme_bw() +  # 使用白色背景主题
  theme(axis.text.x = element_text(hjust = 1)) +  # 旋转 x 轴标签
  labs(x = "Microbe", y = "Score", title = "Microbe Scores with Two Confidence Intervals")+
  theme(
    panel.background = element_rect(fill = "grey98"),
    plot.background = element_rect(fill = "grey98"),
    panel.grid.major.x =element_blank(),
    axis.line.x = element_line(color = "black"),
    axis.text = element_text(size=10, color="black",hjust = 1,vjust = .5),
    axis.title.y =element_blank(),
    axis.title.x = element_blank(),
    axis.line.y = element_line(color = "black"),
    axis.ticks.x = element_blank())+
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())+
  # 添加前 23 个点的标签，避免重叠
  geom_text_repel(data = microbe_data_sorted[microbe_data_sorted$id <=46, ],
                  aes(y = Overall_Score, x = id, label = Microbe),
                  nudge_y = microbe_data_sorted[microbe_data_sorted$id <= 46, ]$nudge_direction, 
                  hjust = 0.5,
                  size = 4, color = "black",segment.linetype = "dotted")
# 添加标签的连线
# geom_segment(data = microbe_data_sorted[microbe_data_sorted$id <= 23, ],
#              aes(yend = Overall_Score + 0.05),
#              linetype = "dotted", color = "grey40")

p

